---
# tasks file for install_cluster

# TODO: Validate cluster settings

- name : Count the hosts to be discovered
  set_fact:
    inventory_hosts: "{{ groups['masters'] | length + groups['workers'] | length }}"

- name: Join list for workers and masters
  set_fact:
    #nodes: "{{ groups['masters'] + groups['workers'] | default([]) }}"
    nodes: "{{ groups['masters'] | default([]) }}"

    #inventory_nodes: "{{ groups['masters'] + groups['workers'] | default([]) }}"
    inventory_nodes: "{{ groups['masters'] | default([]) }}"

- name: Pause to let BMC reboot
  pause:
    prompt: "Enter"
    echo: no


- include_role:
    name: sonofspike.ocm.get_token
- include_role:
    name: sonofspike.ocm.refresh_token

# Monitor hosts discovery
- name: Wait for 20 min until all the hosts are discovered
  uri:
    url: "{{ URL_ASSISTED_INSTALLER_CLUSTER }}"
    method: GET
    headers:
      Authorization: "Bearer {{ access_token }}"
      Content-Type: "application/json"
    status_code: [200, 201]
    return_content: True
  register: cluster
  until: ( cluster.json.hosts | length == inventory_nodes | length ) and ( cluster.json.status == "pending-for-input")
  retries: 20
  delay: 60
  when: install | bool == True

- debug:
    var: cluster.json
    
- name: Patch discovered hosts
  include_tasks: hosts_discovery.yml
  with_items:
    - "{{ cluster.json.hosts }}"
  loop_control:
    loop_var: discovered_host
  no_log: True

# Patch the cluster with the API Virtual IP
- name: Patch cluster with API Virtual IP
  uri:
    url: "{{ URL_ASSISTED_INSTALLER_CLUSTER }}"
    method: PATCH
    headers:
      Authorization: "Bearer {{ access_token }}"
      Content-Type: "application/json"
    status_code: [201]
    return_content: True
    body_format: json
    body: {
        "vip_dhcp_allocation": "{{ VIP_DHCP_ALLOCATION | lower | bool }}",
        "ingress_vip": "{{ INGRESS_VIP }}",
        "api_vip": "{{ API_VIP }}"
    }
  when: 
    - install | bool == True and
      sno == False
  register: http_reply

- debug:
    var: http_reply.json
  when: debug | bool == True

# Monitor cluster discovery
- name: Wait for 20 min until the cluster is ready
  uri:
    url: "{{ URL_ASSISTED_INSTALLER_CLUSTER }}"
    method: GET
    headers:
      Authorization: "Bearer {{ access_token }}"
      Content-Type: "application/json"
    status_code: [200, 201]
    return_content: True
  register: cluster
  until: "cluster.json.status == 'ready'"
  retries: 20
  delay: 60
  when: install | bool == True

# Install cluster
- name: Install cluster
  uri:
    url: "{{ URL_ASSISTED_INSTALLER_CLUSTER }}/actions/install"
    method: POST
    headers:
      Authorization: "Bearer {{ access_token }}"
      Content-Type: "application/json"
    status_code: [202]
    return_content: True
    body_format: json
    body: { }
  when: install | bool == True
  register: http_reply

- name: Debug http_reply
  debug:
    var: http_reply.json
  when: debug | bool == True and install | bool == True


